@page "/boattypes"
@using RaceManager.Language
@using Microsoft.AspNetCore.SignalR.Client
@using RaceManager.Reading
@using RaceManager.DataProcessing.Files
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "RaceManager")]


<PageTitle>Boat types management</PageTitle>

<div class="parent">
    <div class="BoatTypeListContainer">
        <div class="Content">
            <div style="margin-right: 8%">
                @if (_boatTypesList is not null)
                {
                    foreach (BoatType bt in _boatTypesList)
                    {
                        <p> <button class="boat-button" data-id=@bt.ID @onclick="() => BoatTypeSelect(bt)"> @bt.Name </button> </p>
                    }
                }
            </div>
        </div>
        <button class="btn btn-primary button-form" @onclick="AddNewBoatType" disabled="@(_boatTypesList is null)"> @Locales.AddNewBoatType </button>
    </div>

    @if (_loaded)
    {
        <div class="BoatTypeListContainer ">
            <div style="margin: 30px">
                <div style="margin-bottom: 5%">
                    @foreach (KeyValuePair<string, AField> keyValuePair in _fields)
                    {
                        <p> <label> @keyValuePair.Key </label> <input type="text" @bind-value="@(keyValuePair.Value.FieldContent)" disabled="@(_btSelected is null)" style=" @keyValuePair.Value.Style "> </p>
                    }
                    <p> <label> ID : @(_btSelected is not null ? _btSelected.ID : "") </label> </p>

                </div>
            </div>
            <div style="position: absolute; left: 5%; bottom: 3%">
                <p> <button class="btn btn-primary " style="margin:5%" @onclick="Save" disabled="@(_btSelected is null)"> @Locales.Save </button> </p>
                <p> <button class="btn btn-primary" style="background: red;margin:5%" @onclick="() => RemoveBoatType(_btSelected)" disabled="@(_btSelected is null)"> @Locales.Remove </button> </p>
            </div>

        </div>

        <div class="BoatTypeListContainer">
            <div style="height: 60%;">
                <div class="Content" style="position: absolute;left:10px;right:10px;max-width: 90%;height:53%">
                    @if (_btSelected is not null)
                    {
                        foreach (Polar p in _btSelected.PolarFileList)
                        {
                            <p>

                                <label class="polar-button"> @p.Name </label>
                                <button class="del-button" @onclick="() => RemovePolar(p)"> &#10060; </button>
                            </p>

                        }
                    }

                </div>
            </div>

            <div style="position: relative; bottom:0px; margin:0%; border-top:  solid #743b78; min-width: 70%; max-height:29%  ; min-height:25%  ">
                <div style="margin: 8%">
                    <p>
                        <label> @Locales.Name </label>
                        <input type="text" @bind-value="_polarfield.FieldContent" style=" @_polarfield.Style" disabled="@( _btSelected is null)">
                    </p>
                    <p>
                        <InputFile OnChange=LoadFiles disabled="@(_btSelected is null)" />
                    </p>
                    <p>
                        <a style="color: red;"> @_errorMessage </a>
                    </p>
                </div>

            </div>
            <button class="btn btn-primary button-form" style=" position: absolute;bottom:5px; width:auto" @onclick="AddPolarFile" disabled="@(_pSelected is null || _btSelected is null || _polarfield.FieldContent == "")"> Add new polar </button>

        </div>
    }
</div>

@code {
    private List<IBrowserFile> loadedFiles = new();
    private IBrowserFile? _pSelected = null;

    private static RMLogger _logger = new RMLogger("BoatTypesManagement");
    private HubConnection? _hubConnection;

    private bool _loaded = false;

    private List<BoatType>? _boatTypesList;
    private BoatType? _btSelected;
    //private Polar? _btselected;

    private Dictionary<string, AField> _fields = new();
    private bool _isFormValid = true;
    private string _errorMessage = "";
    private BoatTypeField<string> _polarfield = new();

    private async Task RemovePolar(Polar pol)
    {
        if (_btSelected is not null)
        {
            try
            {
                _btSelected.PolarFileList.Remove(pol);
                _logger.log(LoggingLevel.DEBUG, "RemovePolar()", $"Polar {pol.Name} removed");
                SendBoatTypesList(_boatTypesList);

            }
            catch (Exception e)
            {
                _logger.log(LoggingLevel.ERROR, "RemovePolar()", $"Error while removing polar {pol.Name} : {e.Message}");
            }
        }
        else _logger.log(LoggingLevel.WARN, "RemovePolar()", $"Trying to remove {pol.Name} but no boat type was selected.");
    }


    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            IBrowserFile file = e.File;

            if (file is not null)
            {
                _pSelected = file;



                StateHasChanged();
                _errorMessage = "";
            }

            _logger.log(LoggingLevel.DEBUG, "LoadFiles()", $"{e.File} files loaded");
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
            _pSelected = null;
            _logger.log(LoggingLevel.WARN, "LoadFiles()", $"Error while loading file : {ex.Message}");
        }
    }



    private async Task AddPolarFile()
    {
        if (_polarfield.StoreValue())
        {
            if (_pSelected is not null && _btSelected is not null)
            {

                try
                {
                    Polar pol = new Polar() { Name = _polarfield.Value };
                    //var sr = new StreamReader(_pSelected.OpenReadStream());
                    MemoryStream ms = new MemoryStream();
                    await _pSelected.OpenReadStream().CopyToAsync(ms);

                    string content = System.Text.Encoding.UTF8.GetString(ms.ToArray());

                    pol.File = FileManageData.CreateFilePolaire(pol.Name, pol.ID, content);

                    _btSelected.PolarFileList.Add(pol);
                    _pSelected = null;
                    StateHasChanged();
                    _logger.log(LoggingLevel.DEBUG, "AddPolarFile()", $"Polar added");
                    _btSelected.PolarFileList.Sort();
                    SendBoatTypesList(_boatTypesList);

                }
                catch (Exception ex)
                {
                    //_logger.log(LoggingLevel.ERROR, "AddPolarFile()", $"Error while adding polar file {file.Name}");
                    _logger.log(LoggingLevel.ERROR, "AddPolarFile()", ex.Message);
                }
            }
        }
    }

    /// <summary>
    /// Add a new boat type
    /// </summary>
    private void BoatTypeSelect(BoatType bt)
    {
 
        //_logger.log(LoggingLevel.DEBUG, "BoatTypeSelect()", $"User select {bt.Name}");
        _btSelected = bt;
        _fields[Locales.Name].FieldContent = _btSelected.Name;
        _fields[Locales.HullLength].FieldContent = _btSelected.HullLength.ToString();
        _fields[Locales.OverallLength].FieldContent = _btSelected.OverallLength.ToString();
        _fields[Locales.HullWidth].FieldContent = _btSelected.HullWidth.ToString();
        _fields[Locales.OverallWidth].FieldContent = _btSelected.OverallWidth.ToString();
        _fields[Locales.AirDraft].FieldContent = _btSelected.AirDraft.ToString();
        _fields[Locales.Draft].FieldContent = _btSelected.Draft.ToString();
        _fields[Locales.Weight].FieldContent = _btSelected.Weight.ToString();

        _pSelected = null;
        foreach (KeyValuePair<string, AField>
            keyValuePair in _fields)
        {
            keyValuePair.Value.isValid = true;
            keyValuePair.Value.Style = "";
        }
        StateHasChanged();
    }

    /// <summary>
    /// Save the boat type
    ///</summary>
    private void Save()
    {
        _isFormValid = true;
        foreach (KeyValuePair<string, AField>
            keyValuePair in _fields)
        {
            AField afield = keyValuePair.Value;
            afield.StoreValue();
            if (afield.isValid == false)
                _isFormValid = false;
        }

        if (_isFormValid && _btSelected is not null)
        {
            _btSelected.Name = ((BoatTypeField<string>
                )_fields[Locales.Name]).Value;
            _btSelected.HullLength = ((BoatTypeField<float>
                )_fields[Locales.HullLength]).Value;
            _btSelected.OverallLength = ((BoatTypeField<float>
                )_fields[Locales.OverallLength]).Value;
            _btSelected.HullWidth = ((BoatTypeField<float>
                )_fields[Locales.HullWidth]).Value;
            _btSelected.OverallWidth = ((BoatTypeField<float>
                )_fields[Locales.OverallWidth]).Value;
            _btSelected.AirDraft = ((BoatTypeField<float>
                )_fields[Locales.AirDraft]).Value;
            _btSelected.Draft = ((BoatTypeField<float>
                )_fields[Locales.Draft]).Value;
            _btSelected.Weight = ((BoatTypeField<float>
                )_fields[Locales.Weight]).Value;
            _boatTypesList.Sort();
            SendBoatTypesList(_boatTypesList);
        }
        StateHasChanged();
    }
                                                }
