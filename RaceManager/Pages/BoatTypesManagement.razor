@page "/boattypes"
@using RaceManager.Language
@using Microsoft.AspNetCore.SignalR.Client
@using RaceManager.Lecture
@using System.Diagnostics.Eventing.Reader
@inject NavigationManager NavigationManager

<PageTitle>Boat types management</PageTitle>


<div class="parent">
    <div class="BoatTypeListContainer">
        <div class="Content">
            @foreach (BoatType bt in boatTypesList)
            {
                <p> <button data-id=@bt.IDTypeBateau @onclick="() => Select(bt)"> @bt.Name </button> </p>
            }
        </div>
        <button class="btn btn-primary" @onclick="AddNewBoatType">
            Add a new boat type


        </button>
    </div>
    @*</td>*@

    <div class="BoatTypeListContainer ">
        <div class="float-left-child" style="margin-right: 30px;">
            <p> <label> Name </label> <input type="text" @bind-value="Name" disabled="@(Selected is null)" > </p>
            <p> <label> Poids </label> <input type="text"disabled="@(Selected is null)"> </p>
            <p> <label> TirantEau </label> <input type="text"disabled="@(Selected is null)"> </p>
            <p> <label> TirantAir </label> <input type="text"disabled="@(Selected is null)"> </p>
        </div>

        <div class="float-left-child">
            <p> <label> LongueurCoque </label> <input type="text"disabled="@(Selected is null)"> </p>
            <p> <label> LargeurCoque </label> <input type="text"disabled="@(Selected is null)"> </p>
            <p> <label> LongueurHorsTout </label> <input type="text"disabled="@(Selected is null)"> </p>
            <p> <label> LargeurHorsTout </label> <input type="text"disabled="@(Selected is null)"> </p>
        </div>
    </div>

</div>

@*</tr>*@

    //BoatTypesManagement.razor

@code {
    private HubConnection? hubConnection;
    private int currentCount = 0;
    private List<BoatType> boatTypesList = BoatType.BoatTypesList;
    private BoatType Selected = null;

    private int IDTypeBateau;
    private string Name;
    private float LongueurCoque ;
    private float LongueurHorsTout ;
    private float LargeurCoque ;
    private float LargeurHorsTout ;
    private float TirantEeau ;
    private float TirantAir ;
    public float Poids ;






    private void AddNewBoatType()
    {
        Logger.log(LoggingLevel.DEBUG, "BoatTypes.razor", "User clicked on NewBoat");
        boatTypesList.Add(new BoatType($"Boat {boatTypesList.Count + 1}"));
        //Send();
    }

    private void Select(BoatType bt)
    {
        Logger.log(LoggingLevel.DEBUG, "BoatTypes.razor", $"User select {bt.Name}");
        Selected = bt;

        StateHasChanged();
    }

    
    private bool state = false;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/boattypeshub")).Build();

        hubConnection.On<List<BoatType>>("ReceiveMessage", btl =>
        {
            Logger.log(LoggingLevel.DEBUG, "BoatTypes.razor", $"Server sent {btl[0].IDTypeBateau}");
            boatTypesList = btl;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", boatTypesList);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}