@page "/settings"
@using RaceManager.Language
@using Microsoft.AspNetCore.SignalR.Client
@using System.Diagnostics.Eventing.Reader
@using RaceManager.Reading
@using RaceManager.Communication
@*@inject NavigationManager NavigationManager*@

<PageTitle>Settings</PageTitle>
<h3>Port</h3>


<div class="BoatTypeListContainer ">
    <div class="float-left-child" style="margin-right: 30px; min-width : 150% ">
        <div style="margin-bottom: 5%">


            <p> <label> port </label> <input type="text" @bind-value="@(portField.FieldContent)" style=" @portField.Style "> </p>



        </div>
        <p>
            <button class="btn btn-primary" @onclick="Save"> Save </button>

        </p>
               
    </div>
  
</div>

<div class="SettingsOnOff " >
   <p>
                    <button class="btn btn-settings"  style="background: Gray" > @Locales.TurnOnTheServer</button>
                    <button class="btn btn-settings"  style="background: Gray" > @Locales.TurnOffTheServer  </button>
   </p>
</div>
<div class="langue " >
   <p>
                    <button class="btn btn-settings"  style="background: #1b6ec2" > @Locales.French </button>
                    <button class="btn btn-settings"  style="background: #1b6ec2" > @Locales.English </button>
   </p>
</div>

@code {
    private int port;
    private RealField<int> portField = new() { FieldContent="00", Label="Port", Value=0};


    bool loaded = false;
    private void Save()
    {


        if (portField.StoreValue())
            port = portField.Value;
        StateHasChanged();
    }



    protected override async Task OnInitializedAsync()
    {

        loaded = true;

    }


    private class RealField<T> : AField
    {
        // <summary>
        // The boat type field.
        // </summary>
        public int Value;


        private RMLogger logger = new RMLogger(LoggingLevel.DEBUG , "Settings.RealField");


        public override bool StoreValue()
        {
            isValid = false;
            try
            {
                Value = (int)Convert.ChangeType(FieldContent, typeof(int));

                Style = "";                
                if (Value>=0 && Value<=65535)
                {
                    if(ServerHub.IsPortBusy(Value)) //voir les ports ouverts avec netstat -ano | more
                    {
                        isValid = true;
                        logger.log(LoggingLevel.DEBUG, "StoreValue()", $"{FieldContent} is valid.");                        
                    }
                    else 
                        throw new Exception("Error, the selected port number is busy.");  
                                   
                }
                else 
                    throw new Exception("Error in the port range, you must use a port number between 0 and 65535 inclusive.");                   
            }
            catch (Exception e)
            {
                //Value = default(T);
                isValid = false;
                Style = "color: red;border-color: red";
 
                logger.log(LoggingLevel.ERROR, "StoreValue()", $"Error when trying to cast {FieldContent} with \"{e.Message}\"");
             }
            return isValid;
        }
    }

}