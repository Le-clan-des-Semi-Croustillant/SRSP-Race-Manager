@using Microsoft.AspNetCore.SignalR.Client
@using RaceManager.Communication
@using RaceManager.Reading
@using RaceManager.Language
@using System.Timers
@inherits LayoutComponentBase

<PageTitle>Race Manager</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>

        <div class="top-row px-4">
            <a href="@Locales.Github" target="_blank">@Locales.SeethisprojectonGithub </a>
            <a class="ahref" href="@Locales.Page" target="_blank">@Locales.Viewdocs</a>

            <div style="cursor: pointer" @onclick="UpdateStatus">
                @if (_loaded)
                {
                    @if (AsyncServer.IsRunning())
                    {
                        <label style="color: #03ec00; margin-right: 5px;cursor: pointer"> @Locales.ServerRunning </label>
                    }
                    else
                    {
                        <label style="color: red; margin-right: 5px;cursor: pointer"> @Locales.ServerNotRunning</label>
                    }
                    <gg-icon class="gg-sync" style="float: right"></gg-icon>
                }
            </div>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code
{
    int i = 0;
    private bool _loaded = false;
    private System.Timers.Timer aTimer = new System.Timers.Timer(3000);


    protected override async Task OnInitializedAsync()
    {
        aTimer.Elapsed += TickUpdate;

        aTimer.Start();
        _loaded = true;
    }

    private void TickUpdate(Object source, ElapsedEventArgs e)
    {
        UpdateStatus();
    }


    private void UpdateStatus()
    {
        i++;
        InvokeAsync(() => { StateHasChanged(); });
    }

}