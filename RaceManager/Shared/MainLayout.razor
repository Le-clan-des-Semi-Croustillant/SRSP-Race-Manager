@using Microsoft.AspNetCore.SignalR.Client
@using RaceManager.Communication
@using RaceManager.Reading
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager

<PageTitle>Race Manager</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">

            <div>
                @if (IsServerRunning)
                {
                    <label style="color: #03ec00">Server is running</label>
                }
                else
                {
                    <label style="color: red">Server is not running</label>
                }
            </div>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code
{
    private bool IsServerRunning;
    private HubConnection? hubConnection;
    private bool state = false;

    protected override async Task OnInitializedAsync()
    {
        /* <summary>
             * Initialize the component
             * </summary>
             */
        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/serverhub")).Build();


        
        // <summary>
        // Register the event handler
        // </summary>
        hubConnection.On<bool>("ServerStatusUpdate",  IsServerRunning =>
        {
            this.IsServerRunning = IsServerRunning;
           //Logger.log(LoggingLevel.INFO,"MainLayout","Server status updated to " + IsServerRunning);
            StateHasChanged();
        });
        
        IsServerRunning = ServerHub.IsServerRunning;
        IsServerRunning = true;
        await hubConnection.StartAsync();
        
        await hubConnection.SendAsync("UpdateStatus");


    }
    
    //private async Task Send()
    //{
    ///* <summary>
    //     * Send the message to the server
    //     * </summary>
    //     */
    //    if (hubConnection is not null)
    //    {
    //        await hubConnection.SendAsync("SendMessage", boatTypesList);
    //    }
    //}
    
    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
    /* <summary>
         * Dispose the component
         * </summary>
         */
        
        
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}